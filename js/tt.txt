
card.js пока не нужен, да.
addNewPosition можно в map
Модуль map " вставляет на карту другие маркеры", при этом используются функции описанные в pin.
2) обработчик для перемещения маркера - должен быть в  map, это написано в задании
Anton Tolstenko
data.js — модуль, который создаёт данные: как я понимаю в этом модуле нужно выложить код,который создает(пока что) MOCK, в кото
в data.js генерируешь данные, все верно, соханяешь например в widows.data
Передача  данных пока между модулями через window
removeAttributeDisabled можешь напрямую описать и вызывать из map
Но если ты считаешь, что она про форму, то вынеси ее в form и оттуда вызываай, обращаясь к ней через window
"Вы можете разделить код на модули так, как считаете нужным"
Главное чтобы не было явных перекосов.
"Но тоже самое модуль завязан на внешние переменные, и возможно и сам имеет таковые, в UTILS запихивать "связки"?" - не понял твоего вопроса
Anton Tolstenko
еще мелкий вопрос, уже из учебного проекта: код в модуле setup.js (он же код из демки) var form = window.util.setup.querySelecto
не используемые аргументы функции удаляйs

// Модуль util.js
(function () {
  var ESC_KEYCODE = 27;
  var ENTER_KEYCODE = 13;
  console.log('Модуль util создан!');
  window.util = {
    ESC_KEYCODE: ESC_KEYCODE,
    ENTER_KEYCODE: ENTER_KEYCODE
  };
})();

// Модуль dialog.js
(function () {
  console.log(window.util.ESC_KEYCODE);
  console.log(window.util.ENTER_KEYCODE);
  console.log('Модуль dialog создан!');
})();
// Модуль setup.js
(function () {
  console.log(window.util.ESC_KEYCODE);
  console.log('Модуль setup создан!');
})();


// Файл colorize.js
'use strict';
(function () {
  var COLORS = ['red', 'green', 'blue'];
  var getRandomColor = function () {
    return COLORS[Math.floor(COLORS.length * Math.random())];
  };
  window.colorize = function (element) {
    element.addEventListener('click', function () {
      var color = getRandomColor();
      if (element.tagName.toLowerCase() === 'div') {
        element.style.backgroundColor = color;
      } else {
        element.style.fill = color;
      }
    })
  }
})();

// Файл setup.js
'use strict';
(function () {
  var setup = document.querySelector('.setup');
  setup.classList.remove('hidden');
  var wizard = setup.querySelector('.wizard');
  var wizardCoat = wizard.querySelector('.wizard-coat');
  var fireball = setup.querySelector('.setup-fireball-wrap');
  window.colorize(wizardCoat);
  window.colorize(fireball);
})();


// Файл util.js
'use strict';
(function () {
  var ESC_KEYCODE = 27;
  var ENTER_KEYCODE = 13;
  window.util = {
    isEscEvent: function (evt, action) {
      if (evt.keyCode === ESC_KEYCODE) {
        action();
      }
    },
    isEnterEvent: function (evt, action) {
      if (evt.keyCode === ENTER_KEYCODE) {
        action();
      }
    }
  };
})();

var onPopupEscPress = function(evt) {
    window.util.isEscEvent(evt, closePopup);
  };
setupOpen.addEventListener('keydown', function(evt) {
    window.util.isEnterEvent(evt, openPopup);
  });
setupClose.addEventListener('keydown', function(evt) {
  window.util.isEnterEvent(evt, closePopup);
});
